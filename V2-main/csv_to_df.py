import io
import re
import streamlit as st
import pandas as pd
import numpy as np
import requests
import time
from datetime import datetime, timedelta
import spacy
import matplotlib.pyplot as plt
import seaborn as sns
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
import textwrap
import zipfile
import tempfile
import os
from collections import Counter
import openai
from openai import OpenAI
import json


# Initialisation du mod√®le spaCy
nlp = spacy.load("en_core_web_sm")

# Cl√© API NewsAPI
news_api_key = 'a5a5a71c72b74b2a9e09e9ed9af542ca'
HUNTER_API_KEY = "2222faabcb33adf838c9f77752b5451af39ce567" 
GPT_KEY = "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"
ALPHA_API_KEY = "J1Q1MOLI77ZX9T6F"
client = OpenAI(api_key = GPT_KEY) 


def score_business_model(business_model):
    if pd.isna(business_model):
        return 0
    bm = business_model.lower()
    if "b2b" in bm and "b2c" in bm:
        return 1
    elif "b2b" in bm:
        return 2
    elif "b2c" in bm:
        return 0
    return 0


# Liste des technologies agiles
tech_agiles = [
    "docker", "kubernetes", "microservices", "ci/cd", "devops",
    "agile", "scrum", "kanban", "cloud", "aws", "gcp", "azure",
    "react", "vue", "typescript", "fastapi", "graphql", "terraform"
]

# Fonctions de scoring
def score_location(location):
    if pd.isna(location): return 0
    location = location.lower()
    if "france" in location: return 3
    elif "united states" in location or "usa" in location: return 3
    elif "europe" in location: return 2
    elif "india" in location or "china" in location: return 1
    return 0

def score_headcount(headcount):
    if headcount == "5001-10000": return 3
    elif headcount in ["10001+", "1001-5000"]: return 2
    elif headcount in ["51-200", "201-500"]: return 1
    return 0

def score_industry(industry):
    industry = industry.lower() if pd.notna(industry) else ""
    if "biotechnology research" in industry: return 3
    elif "pharmaceutical" in industry or "healthcare" in industry: return 2
    return 0

def score_company_type(company_type):
    if company_type == "privately held": return 3
    elif company_type == "public company": return 0
    return 1

def score_technologies(techs):
    if pd.isna(techs): return 0
    techs = techs.lower()
    score = sum(1 for tech in tech_agiles if tech in techs)
    return min(score, 3)

# Fonction de calcul de scores
def compute_scores(df):
    scores = []
    for _, row in df.iterrows():
        location_score = score_location(row["Location"])
        headcount_score = score_headcount(row["Headcount"])
        industry_score = score_industry(row["Industry"])
        company_type_score = score_company_type(row["Company Type"])
        tech_score = score_technologies(row["Technologies"])
        business_score = score_business_model(row["Business Model"])
        
        total_score = location_score + headcount_score + industry_score + company_type_score + tech_score + business_score
        scores.append([location_score, headcount_score, industry_score, company_type_score, tech_score, business_score, total_score])

    df["Location Score"] = [score[0] for score in scores]
    df["Headcount Score"] = [score[1] for score in scores]
    df["Industry Score"] = [score[2] for score in scores]
    df["Company Type Score"] = [score[3] for score in scores]
    df["Tech Score"] = [score[4] for score in scores]
    df["Business Score"] = [score[5] for score in scores]
    df["Total Score"] = [score[6] for score in scores]
    df["Total Score %"] = np.ceil((df["Total Score"] * 100) / 12)
    
    return df




# Fonction pour r√©cup√©rer les news
def get_news(company_name):
    today = datetime.today().strftime('%Y-%m-%d')
    seven_days_ago = (datetime.today() - timedelta(days=31)).strftime('%Y-%m-%d')
    url = f'https://newsapi.org/v2/everything?q={company_name}&from={seven_days_ago}&to={today}&sortBy=publishedAt&apiKey={news_api_key}'
    try:

        
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        articles = response.json().get('articles', [])
        return articles[:10]
    except:
        return []

# Fonction pour d√©tecter des features
def detect_features_from_text(text, url):
    found = {}
    text = text.lower()
    if "ceo" in text and any(w in text for w in ["appointed", "named", "joins", "new ceo", "new job"]):
        # Retourner le lien sous la forme "link" en bleu
        found['Nouveau Directeur'] = (text, f"[link]({url})")
    if any(w in text for w in ["raised", "funding", "secured"]) and "$" in text:
        found['Levee de Fonds'] = (text, f"[link]({url})")
    if any(w in text for w in ["acquired", "acquisition", "merger", "merge"]):
        found['Acquisition/Fusion'] = (text, f"[link]({url})")
    if any(w in text for w in ["expanding", "expansion", "new office", "opens in"]):
        found['Expansion G√©ographique'] = (text, f"[link]({url})")
    if any(w in text for w in ["launched", "launches", "new product", "unveils"]):
        found['Lancement Produit'] = (text, f"[link]({url})")
    return found




# Fonction pour enrichir avec les actualit√©s, les chiffres d'affaires 2024 et le sentiment
def enrich_with_news_and_revenue(df, news_api_key, revenue_api_key):
    # Enrichir avec les actualit√©s
    features = ['Nouveau Directeur', 'Levee de Fonds', 'Acquisition/Fusion', 'Expansion G√©ographique', 'Lancement Produit']
    for f in features:
        df[f] = 'NaN'
    df['News Score'] = 0

    for idx, row in df.iterrows():
        name = row['Company Name']
        news_items = get_news(name)  # Fonction que tu as d√©j√† d√©finie
        news_score = 0
        for article in news_items:
            title = article.get('title', '')
            desc = article.get('description', '')
            content = f"{title} {desc}"
            url = article.get('url', '')
            detected = detect_features_from_text(content, url)  # Fonction que tu as d√©j√† d√©finie
            for feature, (text, link) in detected.items():
                df.at[idx, feature] = f"{text[:100]}... | {link}"
                news_score += 1
        df.at[idx, 'News Score'] = news_score

        time.sleep(1)  # Respect du rate limit de l'API NewsAPI

    # Enrichir avec les chiffres d'affaires 2024
    companies = df['Company Name'].dropna().tolist()

    # Prompt GPT pour r√©cup√©rer les chiffres d'affaires
    prompt = (
        f"Voici une liste de {len(companies)} entreprises, chacune sur une nouvelle ligne :\n"
        + "\n".join(companies)
        + "\n\nPour chaque entreprise, donne uniquement une estimation de son chiffre d'affaires pour l'ann√©e 2024 en dollars am√©ricains (USD). "
        "Si l'information exacte est disponible, donne l'estimation la plus pr√©cise possible. "
        "Si l'information exacte n'est pas disponible, donne une estimation raisonnable bas√©e sur la notori√©t√©, la taille, et le secteur de l'entreprise. "
        "La r√©ponse doit contenir uniquement des chiffres bruts (ex: 1200000000 pour 1.2 milliard), sans texte, symbole $, ni unit√©. "
        "Si tu n'as pas d'estimation ou de donn√©es disponibles, retourne une estimation du CA en 2024 de l'entreprise sachant toute les infos que tu as. "
        "Retourne exactement une ligne par entreprise, sans texte suppl√©mentaire, et sans unit√©. "
        "Chaque ligne doit √™tre un nombre entier, sans d√©cimales. Ne me dis rien d'autre aucune phrase du style Il est impossible d'obtenir ces donn√©es. C'est juste une estimation du CA en 2024 et m√™me c'est pas grave si tu te trompes. Donnes juste une valeurs pour chaque entreprises. Merci beauoup"
    )

    try:
        # Appel √† l'API OpenAI
        url = "https://api.openai.com/v1/chat/completions"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {revenue_api_key}"
        }
        data = {
            "model": "gpt-4",  # Utilisez "gpt-4" ou "gpt-4-32k" si n√©cessaire
            "messages": [{"role": "user", "content": prompt}]
        }
        response = requests.post(url, headers=headers, json=data, timeout=60)

        if response.status_code == 200:
            # Traiter la r√©ponse de l'API
            content = response.json()['choices'][0]['message']['content']
            print(f"R√©ponse de l'API : {content}")
            revenues = content.strip().split('\n')

            # V√©rifier que la longueur correspond
            if len(revenues) == len(companies):
                # Nettoyer les donn√©es et les convertir en nombres entiers
                revenues = [int(revenue.strip()) if revenue.strip().isdigit() else None for revenue in revenues]
                df['2024 Revenue (USD)'] = pd.Series(revenues)
                print("‚úÖ Colonne '2024 Revenue (USD)' ajout√©e avec succ√®s.")
            else:
                raise Exception("Mauvaise longueur de r√©ponse de l‚ÄôAPI.")
        else:
            raise Exception(f"Erreur API OpenAI : {response.status_code}, {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur enrichissement chiffre d'affaires : {e}")
        # Ajouter une colonne par d√©faut si l'API √©choue
        df['2024 Revenue (USD)'] = None

    return df


# Fonction pour r√©cup√©rer les contacts via Hunter.io
def get_top_1000_contacts(df, api_key = HUNTER_API_KEY, delay_between_calls=1.5):
    # Trier les entreprises selon le score et garder les 1000 premi√®res
    top_1000 = df.sort_values(by="Total Score", ascending=False).head(1000)
    all_contacts = []

    for i, company_name in enumerate(top_1000["Company Name"], start=1):
        try:
            print(f"üîç [{i}/1000] Recherche de contacts pour : {company_name}")
            domain_search_url = f"https://api.hunter.io/v2/domain-search?company={company_name}&api_key={api_key}"
            resp = requests.get(domain_search_url)
            if resp.status_code != 200:
                print(f"‚ö†Ô∏è Erreur avec {company_name} : {resp.status_code}")
                continue
            data = resp.json()
            emails = data.get("data", {}).get("emails", [])
            domain = data.get("data", {}).get("domain", "")
            for email in emails:
                all_contacts.append({
                    "Company": company_name,
                    "Email": email.get("value", ""),
                    "First Name": email.get("first_name", ""),
                    "Last Name": email.get("last_name", ""),
                    "Position": email.get("position", ""),
                    "Domain": domain
                })
            time.sleep(delay_between_calls)  # D√©lai pour √©viter d'√™tre bloqu√© par l'API
        except Exception as e:
            print(f"‚ùå Erreur avec {company_name} : {str(e)}")
            continue

    print(f"‚úÖ Termin√© ! {len(all_contacts)} contacts r√©cup√©r√©s.")
    return all_contacts

    
    

def enrich_business_model_column(df, api_key):
    if "Business Model" in df.columns:
        return df  # d√©j√† pr√©sent

    companies = df['Company Name'].dropna().tolist()

    prompt = (
    f"Voici une liste de {len(companies)} entreprises, chacune sur une nouvelle ligne :\n"
    + "\n".join(companies)
    + "\n\nPour chaque entreprise, retourne uniquement une des valeurs suivantes : B2B, B2C ou B2B et B2C. "
    "Chaque ligne doit contenir uniquement une de ces valeurs, sans texte suppl√©mentaire. "
    f"Assure-toi que la r√©ponse contient exactement {len(companies)} lignes, "
    "une pour chaque entreprise, dans le m√™me ordre que la liste fournie."
    )

    try:
        url = "https://api.openai.com/v1/chat/completions"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }
        data = {
            "model": "gpt-4-turbo",
            "messages": [{"role": "user", "content": prompt}]
        }
        response = requests.post(url, headers=headers, json=data, timeout=60)

        if response.status_code == 200:
            content = response.json()['choices'][0]['message']['content']
            business_models = content.strip().split('\n')
            if len(business_models) == len(companies):
                business_models = [model.strip() for model in business_models]
                df['Business Model'] = pd.Series(business_models)
                return df
            else:
                raise Exception("Mauvaise longueur de r√©ponse de l‚ÄôAPI.")
        else:
            raise Exception(f"Erreur API OpenAI : {response.status_code}, {response.text}")
    except Exception as e:
        st.error(f"‚ùå Erreur enrichissement mod√®le d'affaires : {e}")
        return df

  

def generer_actualites_top_entreprises(df, top_n=5):
    import json

    top_entreprises = df.sort_values(by="Total Score", ascending=False).head(top_n)["Company Name"]
    actualites = []

    for entreprise in top_entreprises:
        prompt = f"""
Tu es un expert en finance et en actualit√©s d'entreprises. Ton r√¥le est de fournir une actualit√© importante (et dat√©e) concernant l'entreprise "{entreprise}".

Utilise les donn√©es les plus pr√©cises de ta base de connaissances. Tu dois ABSOLUMENT fournir une r√©ponse, m√™me si l'entreprise est peu m√©diatis√©e. Cherche dans ton historique jusqu'√† septembre 2021 ou plus si disponible.

Formate ta r√©ponse STRICTEMENT en JSON avec les cl√©s suivantes :

{{
  "nom": "{entreprise}",
  "date": "Date exacte de l'√©v√©nement, format√©e : JJ mois AAAA",
  "actualit√©": "Une phrase claire et pr√©cise r√©sumant un √©v√©nement majeur ou r√©cent pour cette entreprise"
}}

‚ö†Ô∏è Ne donne aucun commentaire, aucune explication, aucun texte avant ou apr√®s. Retourne UNIQUEMENT le JSON, m√™me si tu es incertain.
"""

        try:
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "Tu es un assistant qui g√©n√®re des r√©sum√©s d'actualit√© d'entreprise."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.4,
                max_tokens=200
            )

            contenu = response.choices[0].message.content.strip()

            try:
                data = json.loads(contenu)
                date = data.get("date", "Date inconnue")
                resume = data.get("actualit√©", "R√©sum√© non disponible")
            except json.JSONDecodeError:
                date = "Date inconnue"
                resume = "R√©sum√© non disponible"

            actualites.append((date, resume))

        except Exception as e:
            actualites.append(("Erreur", f"Erreur : {e}"))

    return actualites


def main(input_csv_path, output_csv_path, output_json_path, contacts_csv_path, contacts_json_path):
    # Charger le fichier CSV
    print(f"üìÇ Chargement du fichier CSV : {input_csv_path}")
    df = pd.read_csv(input_csv_path, on_bad_lines='skip')
    print(f"‚úÖ Fichier charg√© avec succ√®s. Colonnes disponibles : {df.columns.tolist()}")

    # √âtape 1 : Enrichir avec les mod√®les d'affaires si non pr√©sent
    print("üîÑ √âtape 1 : Enrichissement avec les mod√®les d'affaires...")
    df = enrich_business_model_column(df, GPT_KEY)
    print(f"‚úÖ Colonnes apr√®s enrichissement des mod√®les d'affaires : {df.columns.tolist()}")
    print(df.head())

    # √âtape 2 : Calculer les scores
    print("üîÑ √âtape 2 : Calcul des scores...")
    df = compute_scores(df)
    print(f"‚úÖ Colonnes apr√®s calcul des scores : {df.columns.tolist()}")
    print(df.head())

    # √âtape 3 : Enrichir avec news, revenus, et sentiment
    print("üîÑ √âtape 3 : Enrichissement avec les actualit√©s, revenus et sentiment...")
    df = enrich_with_news_and_revenue(df, news_api_key, GPT_KEY)
    print(f"‚úÖ Colonnes apr√®s enrichissement avec les actualit√©s : {df.columns.tolist()}")
    print(df.head())

    # √âtape 4 : G√©n√©rer les actualit√©s "News" pour les top entreprises
    print("üîÑ √âtape 4 : G√©n√©ration des actualit√©s pour les top entreprises...")
    actualites = generer_actualites_top_entreprises(df)
    top_names = df.sort_values(by="Total Score", ascending=False).head(len(actualites))["Company Name"].tolist()
    news_dict = dict(zip(top_names, actualites))
    print(f"‚úÖ Actualit√©s g√©n√©r√©es pour les entreprises : {news_dict}")

    # Ajouter les actualit√©s dans une colonne "News"
    df["News"] = df["Company Name"].apply(lambda name: f"{news_dict.get(name, ('Date inconnue', 'Pas d actualit√©'))[0]} - {news_dict.get(name, ('', 'Pas d actualit√©'))[1]}")
    df["Date"] = df["Company Name"].apply(lambda name: news_dict.get(name, ("Date inconnue", "R√©sum√© non disponible"))[0])

    # Sauvegarde du fichier enrichi au format CSV
    print(f"üíæ Sauvegarde du fichier enrichi au format CSV √† : {output_csv_path}")
    df.to_csv(output_csv_path, index=False)
    print(f"‚úÖ Fichier enrichi sauvegard√© avec succ√®s au format CSV.")

    # Sauvegarde du fichier enrichi au format JSON
    print(f"üíæ Sauvegarde du fichier enrichi au format JSON √† : {output_json_path}")
    df.to_json(output_json_path, orient="records", indent=4, force_ascii=False)
    print(f"‚úÖ Fichier enrichi sauvegard√© avec succ√®s au format JSON.")

    # √âtape 5 : R√©cup√©rer les contacts des 1000 meilleures entreprises
    print("üîÑ √âtape 5 : R√©cup√©ration des contacts des 1000 meilleures entreprises...")
    contacts = get_top_1000_contacts(df, HUNTER_API_KEY)

    # Sauvegarder les contacts dans un fichier CSV
    print(f"üíæ Sauvegarde des contacts au format CSV √† : {contacts_csv_path}")
    contacts_df = pd.DataFrame(contacts)
    contacts_df.to_csv(contacts_csv_path, index=False)
    print(f"‚úÖ Fichier des contacts sauvegard√© avec succ√®s au format CSV.")

    # Sauvegarder les contacts dans un fichier JSON
    print(f"üíæ Sauvegarde des contacts au format JSON √† : {contacts_json_path}")
    contacts_df.to_json(contacts_json_path, orient="records", indent=4, force_ascii=False)
    print(f"‚úÖ Fichier des contacts sauvegard√© avec succ√®s au format JSON.")


if __name__ == "__main__":
    input_path = "test.csv"  # Ton fichier d'entr√©e
    output_csv_path = "companies_enriched.csv"  # Fichier enrichi au format CSV
    output_json_path = "companies_enriched.json"  # Fichier enrichi au format JSON
    contacts_csv_path = "contacts.csv"  # Fichier des contacts au format CSV
    contacts_json_path = "contacts.json"  # Fichier des contacts au format JSON
    main(input_path, output_csv_path, output_json_path, contacts_csv_path, contacts_json_path)






    













